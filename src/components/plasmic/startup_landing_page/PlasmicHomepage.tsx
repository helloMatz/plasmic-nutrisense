// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hKULxbku7aAVgz4QBDxfRd
// Component: BR0MKdNL5VZdp
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MyNewComponent from "../../MyNewComponent"; // plasmic-import: AugnnAEu1k/component
import MyComponent from "../../MyComponent"; // plasmic-import: tuy2jZAPNO/component
import OneMoreComponent from "../../OneMoreComponent"; // plasmic-import: BgyRZ5NYRVL/component
import Password from "antd/lib/input/Password"; // plasmic-import: fTDg0FM1tnD/codeComponent

import { useScreenVariants as useScreenVariants_6Go3K29GaSCqa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6GO3K29gaSCqa/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_startup_landing_page.module.css"; // plasmic-import: hKULxbku7aAVgz4QBDxfRd/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: BR0MKdNL5VZdp/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vZzyqZF1imSwc/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: EMnPiioyTdpKy/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: e-8pvz2zP1Icc/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 48kq5Xl6j1EyS/icon
import logo1SvgFxrAxbROw8Tv from "./images/logo1Svg.svg"; // plasmic-import: fxrAxbR-ow8Tv/picture
import virtualAssistancepngBD4Q2R3GRrsi from "./images/virtualAssistancepng.png"; // plasmic-import: bD4Q2R3g-rrsi/picture
import rocketManRemovebgPreview1PngFio7Dg8BChErF from "./images/rocketManRemovebgPreview1Png.png"; // plasmic-import: Fio7DG8b-CHErF/picture
import blastRemovebgPreviewpngFiLybAv29Q45Z from "./images/blastRemovebgPreviewpng.png"; // plasmic-import: FILybAv29q45Z/picture
import integrationsHeadersvgF7MW04NoRu9P from "./images/integrationsHeadersvg.svg"; // plasmic-import: f7mW04noRU9P_/picture
import foodDeliveryScooterPngPhotopng5SAZdf6YmMwy from "./images/foodDeliveryScooterPngPhotopng.png"; // plasmic-import: 5S_AZdf6YmMWY/picture
import lightningRemovebgPreviewpngFWr85SqOmcq1 from "./images/lightningRemovebgPreviewpng.png"; // plasmic-import: fWR85sqOmcq1_/picture
import c519F38487C89Fadc75B13Ae907Ab12FRemovebgPreviewpngEkmRrzRn1VFwp from "./images/c519F38487C89Fadc75B13Ae907Ab12FRemovebgPreviewpng.png"; // plasmic-import: ekmRrzRn1VFwp/picture
import logo1Svg2SVoEsf46DN6MR from "./images/logo1Svg2.svg"; // plasmic-import: SVoESF46dN6mR/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("children");

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  headerSliderSection?: p.Flex<"div">;
  button?: p.Flex<"button">;
  h1?: p.Flex<"h1">;
  art?: p.Flex<"div">;
  copy?: p.Flex<"div">;
  copy2?: p.Flex<"div">;
  art2?: p.Flex<"div">;
  antdInputPassword?: p.Flex<typeof Password>;
};

export interface DefaultHomepageProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Go3K29GaSCqa()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerSliderSection"}
            data-plasmic-override={overrides.headerSliderSection}
            className={classNames(projectcss.all, sty.headerSliderSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gooDc)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qhS3T)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__uMigO)}
                  displayHeight={"default" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"76px" as const}
                  src={{
                    src: logo1SvgFxrAxbROw8Tv,
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vtv6B)}
                >
                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__lp1V1
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__nnIit)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lqLk5
                      )}
                    >
                      {"Tour"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__nHjpL)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__lLrLt
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__xMHcm)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xyo3
                      )}
                    >
                      {"Pricing"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__eH2Je)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__pTxKi
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__gevln)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tbrFb
                      )}
                    >
                      {"Company"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__lkAml)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__wCbFi
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__rNf1)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b3QEw
                      )}
                    >
                      {"Contact"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__pYMt5)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__zMrUy
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__iP9Iq)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c9A4Z
                      )}
                    >
                      {"Sign up"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__dkver)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hAn9X)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Sign up"}
                    </button>

                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__azsln
                      )}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__uXntw)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iYe26
                        )}
                      >
                        {"Log in"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__kpCxI)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9GYy2)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(projectcss.all, projectcss.h1, sty.h1)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Hero text for your startup's product.",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </h1>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e1Bgv
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This is introduction text describing why people should use your product. Double-click anywhere on the text to edit it's contents."
                  : "Lorem Ipsum is simply dummy text of the \nprinting and typesetting industry. "}
              </div>

              <MyNewComponent
                className={classNames(
                  "__wab_instance",
                  sty.myNewComponent___05YjP
                )}
              />

              <MyComponent
                className={classNames("__wab_instance", sty.myComponent__wn0Hw)}
              />

              {true ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__msvsu)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("454px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"81%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: virtualAssistancepngBD4Q2R3GRrsi,
                    fullWidth: 2006,
                    fullHeight: 2006,
                    aspectRatio: undefined
                  }}
                />
              ) : null}
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__ak9Ry)}>
            <MyNewComponent
              className={classNames(
                "__wab_instance",
                sty.myNewComponent___4TEcS
              )}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tWu3B)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__b1Xu
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This header tells people why\n they should use your product."
                  : "Lorem Ipsum is Simply dummy text of\n the printing and typesetting industry"}
              </h2>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yqhaO
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This is text giving an overview of the features section. Double-click anywhere on the text to edit it's contents."
                  : "Lorem Ipsum is Simply dummy text of the\n printing and typesetting industry"}
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___491H)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__hb1Yl)}>
                  <div
                    data-plasmic-name={"art"}
                    data-plasmic-override={overrides.art}
                    className={classNames(projectcss.all, sty.art)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__dGite)}
                      displayHeight={"90%" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"90%" as const}
                      src={{
                        src: rocketManRemovebgPreview1PngFio7Dg8BChErF,
                        fullWidth: 530,
                        fullHeight: 471,
                        aspectRatio: undefined
                      }}
                    />

                    <MyComponent
                      className={classNames(
                        "__wab_instance",
                        sty.myComponent__zV8
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___6QUyv)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4HBur
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy"}
                        data-plasmic-override={overrides.copy}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ul5M8
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__ik9Ow
                            )}
                          >
                            {"Lorem Ipsum "}
                          </h3>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__znBt5
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book"
                            }
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nS5JK
                          )}
                        >
                          <p.Stack
                            as={"a"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__rZsn1
                            )}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ieSSh
                                )}
                                role={"img"}
                              />
                            ) : null}

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kwRPd
                              )}
                            >
                              {"Learn more"}
                            </div>

                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__iBax
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__b33R)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__l3Aka)}
            >
              <div className={classNames(projectcss.all, sty.column__qhVm)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__svPaX)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__oj8E
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "This heading"
                      : "This heading"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a45Rt
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__j0MUv)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: blastRemovebgPreviewpngFiLybAv29Q45Z,
                      fullWidth: 499,
                      fullHeight: 499,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__oMmN)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__h7HmP)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3___1CwLb
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "This heading"
                      : "This heading"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tLb18
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__iF4Wg)}
                    displayHeight={"350px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: integrationsHeadersvgF7MW04NoRu9P,
                      fullWidth: 133,
                      fullHeight: 150,
                      aspectRatio: 0.885714
                    }}
                  />
                </p.Stack>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__v766K)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iz7Xi)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__sklY)}>
                <div className={classNames(projectcss.all, sty.freeBox__ovPzx)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wrjxn)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy2"}
                      data-plasmic-override={overrides.copy2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy2)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lcZGs
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__gu43Z
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "This is header about this product feature."
                            : "This is header about this product feature."}
                        </h3>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mLBdP
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book"
                          }
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ntq92
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5KyT4
                          )}
                        >
                          <p.Stack
                            as={"a"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__zqhSz
                            )}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___3QlGz
                                )}
                                role={"img"}
                              />
                            ) : null}

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hwnKf
                              )}
                            >
                              {"Learn more"}
                            </div>

                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__w0Fzc
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"art2"}
                  data-plasmic-override={overrides.art2}
                  className={classNames(projectcss.all, sty.art2)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___3S9K)}
                    displayHeight={"363px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    src={{
                      src: foodDeliveryScooterPngPhotopng5SAZdf6YmMwy,
                      fullWidth: 777,
                      fullHeight: 687,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__mSnM6)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__wNDsl)}
            >
              <div className={classNames(projectcss.all, sty.column__hzaul)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9B4H7)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__gSyc2)}
                    displayHeight={"243px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: lightningRemovebgPreviewpngFWr85SqOmcq1,
                      fullWidth: 562,
                      fullHeight: 444,
                      aspectRatio: undefined
                    }}
                  />

                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3___2KG9E
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "This heading"
                      : "This heading"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xbr59
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__ggbgM)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__djToT)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__eutbf
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "This is header about this other product feature."
                      : "This is header about this other product feature."}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yMfmm
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__jzhUz)}
                    displayHeight={"248px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: c519F38487C89Fadc75B13Ae907Ab12FRemovebgPreviewpngEkmRrzRn1VFwp,
                      fullWidth: 577,
                      fullHeight: 433,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__iiX7J)}>
            <div className={classNames(projectcss.all, sty.freeBox__gr60V)}>
              <OneMoreComponent
                className={classNames(
                  "__wab_instance",
                  sty.oneMoreComponent__tdHax
                )}
              />
            </div>
          </div>

          <OneMoreComponent
            className={classNames(
              "__wab_instance",
              sty.oneMoreComponent___2Qnce
            )}
          />

          <Password
            data-plasmic-name={"antdInputPassword"}
            data-plasmic-override={overrides.antdInputPassword}
            className={classNames("__wab_instance", sty.antdInputPassword)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__uHKxU)}>
            <MyNewComponent
              className={classNames(
                "__wab_instance",
                sty.myNewComponent___8Yoor
              )}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cw97C)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__vK7IP
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This is a final call-to-\naction header"
                  : "Make a call to action."}
              </h2>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tOqt)}
              >
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__bj8Kk
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___5Z0Qk)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c6VDo
                    )}
                  >
                    {"Sign up today"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__mxKl)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__rWg5K)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___10Ty5)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rj6Fz)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fjKod)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__sVs5)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    src={{
                      src: logo1Svg2SVoEsf46DN6MR,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lNVhA
                    )}
                  >
                    {"Company Name"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sShoi)}
                  >
                    {true ? (
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__x32D
                        )}
                        href={"#" as const}
                      >
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__gHmjI)}
                          role={"img"}
                        />
                      </a>
                    ) : null}
                    {true ? (
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__kHjU3
                        )}
                      >
                        <Icon2Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8LQw1
                          )}
                          role={"img"}
                        />
                      </a>
                    ) : null}
                    {true ? (
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__sx7Hn
                        )}
                      >
                        <Icon28Icon
                          className={classNames(projectcss.all, sty.svg__k6Y3C)}
                          role={"img"}
                        />
                      </a>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iircK)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__yu2Vu
                  )}
                >
                  {"Product"}
                </h3>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__wuThx
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__qPm4O)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z1KR
                    )}
                  >
                    {"Pricing"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__uiDt)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zfoCq
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__nNfjj)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__viUiH
                    )}
                  >
                    {"Log in"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__nZQsa)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mcm5O
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__yHi)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dOJj
                    )}
                  >
                    {"Integrations"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__lRxTd)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__hdraK
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ezeCa)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zWeU
                    )}
                  >
                    {"Insights"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__uHAqK)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__j6TDq)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___8LSmu
                  )}
                >
                  {"Legal"}
                </h3>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__wrELu
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__c23Wl)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lU15
                    )}
                  >
                    {"Documentation"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__iTfnp)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__uYaOu
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___4D7Ue)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xlHa3
                    )}
                  >
                    {"FAQs"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__dfisX)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___6TAQh
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__l9JLk)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vojvs
                    )}
                  >
                    {"Status"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__bnJ0R)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___87S6H)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__gU6Ji
                  )}
                >
                  {"Company"}
                </h3>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__fi4QW
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__n0V8Y)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dY76D
                    )}
                  >
                    {"About"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__gmQm2)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__ocvCe
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__lijIa)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6FfYs
                    )}
                  >
                    {"Contact us"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ozp4S)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__j4DEy
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__bMuKf)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kFlf
                    )}
                  >
                    {"Careers"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ieCdc)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__beFJk
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__aHaQx)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cadsZ
                    )}
                  >
                    {"Media"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___0Y6Kg)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a4PWb
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "© Company. All rights reserved. This site proudly built with "
                  }
                </React.Fragment>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__uSi3H
                  )}
                >
                  {"Plasmic"}
                </a>
                <React.Fragment>{"."}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerSliderSection",
    "button",
    "h1",
    "art",
    "copy",
    "copy2",
    "art2",
    "antdInputPassword"
  ],
  headerSliderSection: ["headerSliderSection", "button", "h1"],
  button: ["button"],
  h1: ["h1"],
  art: ["art"],
  copy: ["copy"],
  copy2: ["copy2"],
  art2: ["art2"],
  antdInputPassword: ["antdInputPassword"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerSliderSection: "div";
  button: "button";
  h1: "h1";
  art: "div";
  copy: "div";
  copy2: "div";
  art2: "div";
  antdInputPassword: typeof Password;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSliderSection: makeNodeComponent("headerSliderSection"),
    button: makeNodeComponent("button"),
    h1: makeNodeComponent("h1"),
    art: makeNodeComponent("art"),
    copy: makeNodeComponent("copy"),
    copy2: makeNodeComponent("copy2"),
    art2: makeNodeComponent("art2"),
    antdInputPassword: makeNodeComponent("antdInputPassword"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
