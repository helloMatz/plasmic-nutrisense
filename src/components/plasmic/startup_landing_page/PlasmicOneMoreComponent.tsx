// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hKULxbku7aAVgz4QBDxfRd
// Component: BgyRZ5NYRVL
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_6Go3K29GaSCqa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6GO3K29gaSCqa/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_startup_landing_page.module.css"; // plasmic-import: hKULxbku7aAVgz4QBDxfRd/projectcss
import sty from "./PlasmicOneMoreComponent.module.css"; // plasmic-import: BgyRZ5NYRVL/css

import _11607942448Eynexrk8MlRemovebgPreviewpngVppwsEdHxGV4 from "./images/_11607942448Eynexrk8MlRemovebgPreviewpng.png"; // plasmic-import: VppwsEdHx_gV4/picture

export type PlasmicOneMoreComponent__VariantMembers = {};

export type PlasmicOneMoreComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicOneMoreComponent__VariantsArgs;
export const PlasmicOneMoreComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOneMoreComponent__ArgsType = {};
type ArgPropType = keyof PlasmicOneMoreComponent__ArgsType;
export const PlasmicOneMoreComponent__ArgProps = new Array<ArgPropType>();

export type PlasmicOneMoreComponent__OverridesType = {
  root?: p.Flex<"div">;
  copy3?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  text?: p.Flex<"div">;
  art3?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultOneMoreComponentProps {
  className?: string;
}

function PlasmicOneMoreComponent__RenderFunc(props: {
  variants: PlasmicOneMoreComponent__VariantsArgs;
  args: PlasmicOneMoreComponent__ArgsType;
  overrides: PlasmicOneMoreComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Go3K29GaSCqa()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zNRwj)}>
        <div className={classNames(projectcss.all, sty.freeBox__i7E8E)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aDfMn)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"copy3"}
              data-plasmic-override={overrides.copy3}
              hasGap={true}
              className={classNames(projectcss.all, sty.copy3)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___1Rjm4)}
              >
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Trusted by thousands of companies"
                    : "eqwewewq"}
                </h3>

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {
                    "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                  }
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>

        <div
          data-plasmic-name={"art3"}
          data-plasmic-override={overrides.art3}
          className={classNames(projectcss.all, sty.art3)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("220px" as const)
                : ("399px" as const)
            }
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            src={{
              src: _11607942448Eynexrk8MlRemovebgPreviewpngVppwsEdHxGV4,
              fullWidth: 480,
              fullHeight: 517,
              aspectRatio: undefined
            }}
          />
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "copy3", "h3", "text", "art3", "img"],
  copy3: ["copy3", "h3", "text"],
  h3: ["h3"],
  text: ["text"],
  art3: ["art3", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  copy3: "div";
  h3: "h3";
  text: "div";
  art3: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOneMoreComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOneMoreComponent__VariantsArgs;
    args?: PlasmicOneMoreComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOneMoreComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOneMoreComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOneMoreComponent__ArgProps,
      internalVariantPropNames: PlasmicOneMoreComponent__VariantProps
    });

    return PlasmicOneMoreComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOneMoreComponent";
  } else {
    func.displayName = `PlasmicOneMoreComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicOneMoreComponent = Object.assign(
  // Top-level PlasmicOneMoreComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copy3: makeNodeComponent("copy3"),
    h3: makeNodeComponent("h3"),
    text: makeNodeComponent("text"),
    art3: makeNodeComponent("art3"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicOneMoreComponent
    internalVariantProps: PlasmicOneMoreComponent__VariantProps,
    internalArgProps: PlasmicOneMoreComponent__ArgProps
  }
);

export default PlasmicOneMoreComponent;
/* prettier-ignore-end */
